多态是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期才确定，即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在程序运行期间才能决定。

hashCode()的默认行为是对堆上的对象产生独特值，如果没有重写hashCode(),则该class的两个对象无论如何都不会相等

Java程序设计语言对象采用的不是引用调用。对象引用是按值传递的
1、一个方法不能修改一个基本数据类型的参数（――即数值型或布尔型―――）
2、一个方法可以改变一个对象参数的状态
3、一个方法不能让对象参数引用一个新的对象

Throwable
Error(错误)：是程序无法处理的错误
Exception(异常) 是程序本身可以处理的异常。Exception类有一个重要的子类RuntimeException。RuntimeException异常由Java虚拟机抛出。NullPointerException（要访问的变量没有引用任何对象时，抛出该异常）、ArithmeticException(算术运算异常，一个整数除以0时，抛出该异常）和ArrayIndexOutOfBoundsException（下标越界异常）


try catch finally
在以下4种特殊情况下，finally块不会被执行
1、在finally语句块第一行发生了异常。
2、在前面的代码中用了System.exit(int)已退出程序。exit是带参函数；若该语句在异常语句之后，finally会执行
3、程序所在的线程死亡
4、关闭Cpu
当try语句和finally语句中都有return语句时，在方法返回之前，finally语句的内容将被执行，并且finally语句的返回值将会覆盖原始的返回值


Java序列化中如果有些字段不想进行序列化
对于不想进行序列化的变量，使用transient关键字修饰
transient关键字的作用：阻止实例中那些用此关键字修饰的变量序列化；当对象被反序列化时，被transient修饰的变量值不会被持久化和恢复。transient只能修饰变量，不能修饰类和方法。


获取用键盘输入常用的两种方法
方法1:通过Scanner
Scanner input = new Scanner(System.in);
String s = input.nextLine();
input.close();
方法2：通过BufferedReader
BufferedReader input = new BufferedReader(new InputStreamReader(System.in));
String s = input.readLine();

Java中IO流
按照流的流向分，可以分为输入流和输出流；
按照操作单元划分，可以划分为字节流和字符流；
按照流的角色划分分为节点流和处理流。
InputStream/Reader:所有的输入流的基类，前者是字节输入流，后者是字符输入流。
OutputStream/Writer:所有输出流的基类，前者是字节输出流，后者是字符输出流。

不管是文件读写还是网络发送接收，信息最小的存储单元都是字节，那为什么I/O流操作要分为字节流操作符和字符流操作呢？
回答：字符流是由Java虚拟机将字节转换得到的，问题就出在这个过程还算是非常耗时，并且我们不知道编码类型就很容易出现乱码问题。所以,I/O流就干脆提供了直接操作字符的接口，方便我们平时对字符进行流操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。

final关键字主要用在三个地方：变量、方法、类
1、对于一个final变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在其初始化之后便不能再让其指向另一个对象。
2、当用final修饰一个类时，表明这个类不能被继承。final类中的所有成员方法都会被隐式地指定为final方法。
3、使用final方法的原因有两个。第一个原因是把方法锁定，以防任何继承类修改它的含义；第二个原因是效率。早期的java实现版本中，会将final方法转为内嵌调用。但是如果方法过于庞大，可能看不到内嵌调用带来的任何性能提升。类中所有的private方法都隐式地指定为final


static关键字主要有以下四种使用场景：
1、修饰成员变量和成员方法：被static修饰的成员属于类，不属于这个类的某个对象，被类中所有对象共享，可以并且建议通过类名调用。被static声明的成员变量属于静态成员变量，静态变量存放在java内存区域的方法区。、
2、静态代码块：静态代码块定义在类中方法外，静态代码块在非静态代码块之前执行。该类不管创建多少对象，静态代码块只执行一次
3、静态内部类（static修饰类的话只能修饰内部类）：静态内部类与非静态内部类之间存在一个最大的区别：非静态内部类在编译完成之后会隐含地保存着一个引用；
静态代码块对于定义在它之后的静态变量可以赋值，但是不可以访问
静态内部类实现单例模式
public class Singleton {
	
	private Singleton() {}
	
	private static class SingletonHolder {
		private static final Singleton INSTANCE = new Singleton();
	}

	public static Singleton getUniqueInstance() {
		return SingletonHolder.INSTANCE;
	}
}
当Singleton类加载时，静态内部类SingletonHolder没有被加载进内存。只有当调用getUniqueInstance()方法从而触发SingletonHolder.INSTANCE时SingleHolder才会被加载，此时初始化INSTANCE实例，并且JVM能确保INSTANCE只能被实例化一次

static{}静态代码块与{}非静态代码块（构造代码块）
相同点：都是在JVM加载类时且在构造方法执行之前执行，在类中都可以定义多个，定义多个按定义的顺序执行，一般在代码块中对一些static变量进行赋值
不同点：静态代码块在非静态代码块之前执行。静态代码块只在第一次new执行一次，之后不在执行，而非静态代码块在每new一次就执行一次。非静态代码块可在普通方法中定义（不过作用不大）；而静态代码块不行。
订正：静态代码块可能在第一次new的时候执行，但不一定只在第一次new的时候执行。比如通过Class.forName()创建Class对象的时候也
会执行

Integer x = 3;
Integer y = 3;
System.out.pritln(x == y);//true
Integer a = new Integer(3);
Integer b = new Integer(3);
System.out.println(a == b);//false
System.out.println(a.equals(b));//true
当使用自动装箱方式创建一个Integer对象时，当数值在-128~127时，会将创建的Integer对象缓存起来，当下次再出现该数值时，直接从缓存中取出对应的Integer对象。

浮点数之间的等值判断，基本数据类型不能用==来比较，包装数据类型不能用equals来判断。
使用BigDecimal来定义浮点数的值，再进行浮点数的运算操作
BigDecimal a = new BigDecimal("1.0");
BigDecimal b = new BigDecimal("0.9");
BigDecimal c = new BigDecimal("0.8");
BigDecimal x = a.subtract(b);// 0.1
BigDecimal y = a.subtract(c);// 0.1
System.out.println(x.equals(y));// true


使用工具类Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方法，它的add/remove/clear方法会跑出UnsupportedOperationException异常。
说明：asList的返回对象是一个Arrays内部类，并没有实现集合的修改方法。Arrays.asList体现的是适配器模式，只是转换接口，后台的数据仍是数组。
Arrays.asList()是泛型方法，传入的对象必须是对象数组。

正确的将数组转换为ArraysList
使用Java8的Stream
Integer [] myArray = { 1, 2, 3};
List myList = Arrays.stream(myArray).collect(Collectors.toList());

不要在foreach循环里进行元素的remove/add操作
如果要进行remove操作，可以调用迭代器的remove方法而不是集合类的remove方法。因为如果列表在任何时间从结构上修改迭代器之后，以任何方式除非迭代器自身remove/add方法，迭代器都将抛出ConcurrentModificationException，这就是单线程状态下产生的fail-fast机制

枚举比常量的优势
以这种方式定义的常量使代码更具可读性，允许进行编译时检查，预先记录可接收值的列表，并避免由于传入无效值而引起的意外
行为。
public enum PizzaStatus {
	private PizzaStatus status;

	ORDERED,
	READY.
	DELIVERED;
}

反射
package cn.javaguide;

public class TargetObject {
    private String value;

    public TargetObject() {
        value = "JavaGuide";
    }

    public void publicMethod(String s) {
        System.out.println("I love " + s);
    }

    private void privateMethod() {
        System.out.println("value is " + value);
    }
}

使用反射操作这个类的方法以及参数
package cn.javaguide;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class Main {
    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException, NoSuchFieldException {

// 获取TargetObject类的Class对象并且创建TargetObject类实例
Class<?> tagetClass = Class.forName("cn.javaguide.TargetObject");
TargetObject targetObject = (TargetObject)tagetClass.newInstance();
// 获取所有类中所有定义的方法
Method[] methods = target.getDeclaredMethods();
// 获取指定方法并调用
Method publicMethod = tagetClass.getDeclaredMethod("publicMethod", String.class);
publicMethod.invoke(targetObject, "JavaGuide");
// 获取指定参数并对参数进行修改
Field field = tagetClass.getDeclaredField("value");
//为了对类中的参数进行修改我们取消安全检查
field.setAccessible(true);
field.set(targetObject, "targetObject");
//调用private方法
Method privateMethod = tagetClass.getDeclaredMethod("privateMethod");
privateMethod.setAccessible(true);
privateMethod.invoke(targetObject);
}

List、Set.Map三者的区别
List(对付顺序的好帮手)：List接口存储一组不唯一（可以有多个元素引用相同的对象）有序对象
Set(注重独一无二的性质)：不允许重复的集合。不会有多个元素引用相同的对象。
Map（用Key来搜索的专家）：使用键值对存储。Map会维护与Key有关联的值。两个Key可以引用相同的对象，但Key不能重复，典型的Key是String类型，但也可以是任何对象。


ArrayList与LinkedList区别
是否保证线程安全：ArrayList和LinkedList都是不同步的，也就是不保证线程安全；
底层数据结构：ArrayList底层使用的是Object数组；LinkedList底层使用的是双向链表数据结构

插入和删除是否受元素位置的影响：1、ArrayList采用数组存储，所以插入和删除元素的时间复杂度受元素位置的影响。2、LinkedList采用链表存储，所以对于add方法的插入，删除元素时间复杂度不受元素位置的影响，近似O(1),如果是要在指定位置i插入和删除元素的话时间复杂度近似为O(n)因为需要先移动到指定位置再插入

是否支持快速随机访问：LinkedList不支持高效的随机元素访问，而ArrayList支持。快速随机访问就是通过元素的序号快速获取元素对象

内存空间占用:ArrayList的空间浪费主要体现在在list列表的结尾会预留一定的容量空间，而LinkedList的空间花费则体现在它的每一个元素都需要消耗比ArrayList更多的空间



RandomAccess接口只是标识，并不是说ArrayList实现RandomAccess接口才具有快速随机访问功能的
list遍历方式选择
实现了RandomAccess接口的list，优先选择普通for循环，其次foreach
未实现RandomAccess接口的list，优先选择iterator遍历，大suze的数据，千万不要使用普通for循环

双向链表：包含两个指针，一个prev指向前一个节点，一个next指向后一个节点
双向循环链表：最后一个节点的next指向head，而head的prev指向最后一个节点，构成一个环


ArrayList与Vector区别
Vector类的所有方法都是同步的。可以由两个线程安全地访问一个Vector对象、但是一个线程访问Vector的话代码要在同步操作上耗费大量的时间。ArrayList不是同步的，所以不需要保证线程安全时建议使用ArrayList

HashMap和Hashtable的区别
线程是否安全：HashMap是非线程安全的，HashTable是线程安全的；HashTable内部的方法都经过synchronized修饰（如果要保证线程安全的话可以使用ConcurrentHashMap）；
效率：因为线程安全的问题，HashMap要比HashTable效率高。HashTable基本被淘汰；
对NULL KEY 和null value的支持：HashMap中，null可以作为键，这样的键只有一个，可以有一个或多个键所对应的值为null，但是在HashTable中put进的键值只要有一个null，直接抛出NullPointerException
初始容量大小和每次扩充容量大小的不同：1、创建时如果不指定容量初始值，Hashtable默认的初始化大小为11，之后每次扩充，容量变为原来的2n+1。HashMap默认的初始化大小为16。之后每次扩充，容量变为原来的2倍。2、创建时如果给定了容量初始值，那么Hashtable会直接使用你给定的大小，而HashMap总是将其扩充为2的幂次方大小（HashMap中的tableSizeFor（）方法保证）。也就是说HashMap总是使用2的幂作为哈希表的大小；
底层数据结构:JDK1.8之后的HashMap在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8），将链表转化为红黑树，以减少搜索时间。Hashtable没有这样的机制。

static final int tableSizeFor(int cap) {
    	int n = cap - 1;
    	n |= n >>> 1;// 奇数
    	n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        return (n < 0) ? 1 : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;// 偶数

}

HashMap和HashSet区别
HashSet底层是基于HashMap实现的（HashSet的源码非常少，除了clone（）、writeObject（）、readObject()是HashSet自己不得不是实现之外，其他方法都是直接调用HashMap中的方法）
HashMap实现了Map接口、存储键值对、调用put()向map中添加元素、使用键key计算hashcode
HashSet实现Set接口、仅存储对象、调用add（）方法向Set中添加元素、HashSet使用成员对象来计算hashcode值，对于两个对象来说hashcode可能相等，所以equals（）方法用来判断对象的相等性

hash()与equals()的相关规定
1、如果两个对象相等，则hashcode一定也是相同的
2、两个对象相等，对两个equals方法返回true
3、两个对象有相同的hashcode值，它们也不一定是相等的
4、综上，equals方法被覆盖过，则hashcode方法也必须被覆盖
5、hashcode的默认行为是对堆上的对象产生独特值。如果没有重写hashcode().则该class的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）

==与equals的区别
1、==是判断两个变量或实例是不是指向同一个内存空间equals是判断两个变量或实例所指向的内存空间的值是不是相同
2、==是指对内存地址进行比较equals是对字符串的内容进行比较
3、==指引用是否相同。equals指的是值是否相同

LinkedHashMap:LinkedHashMap是HashMap的一个子类，保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的，也可以在构造时带参数，按照访问次序排序。
TreeMap:TreeMap实现SortedMap接口，能够把它保存的记录根据键排序，默认是按键值的升序排序，也可以指定排序的比较器，当用Iterator遍历Treeo得到的记录是排过序的。如果使用排序的映射，建议使用TreeMap。在使用TreeMap时，key必须实现Comparable接口或者在构造TreeMap传入自定义的Comparator，否则会在运行时跑出java.lang.ClassCastException类型的异常

^异或运算，如果a、b两个值不相同则异或结果为1。如果a、b两个值相同，异或结果为0

HashMap简介
HashMap主要是用来存放键值对，它基于哈希表的Map接口实现，是常用的Java集合之一。
JDK1.8之前HashMap底层是数组和链表结合在一起使用也就是链表散列。HashMap通过key的hashcode经过扰动函数处理过后得到hash值，然后通过（n-1）& hash判断当前元素存放的位置（n指数组的长度），如果当前位置存在元素的话，就判断该元素与要存入元素的hash值以及key是否相同，如果相同的话，直接覆盖，不相同就通过拉链法解决冲突。所谓扰动函数指的是HashMap的hash方法。使用hash方法也就是扰动函数是为了防止一些实现比较差的hashcode()方法换句话说使用扰动函数之后可以减少碰撞

JDK1.8 HashMap的hash方法源码：

static final int hash(Object key) {
    int h;
    // key.hashCode():返回值也就是hashcode ^按位异或相同为0，不同为1 >>>无符号右移，    // 忽略符号位，空位都以0补齐
    return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);
}

JDK1.7源码
static int hash(int h) {
    h ^= (h >>> 20) ^ (h >>> 12);
    return h ^ (h >>> 7) ^ (h >>> 4);
}

public class HashMap<K,V> extends AbstractMap<K,V> implements Map<K,V>, Cloneable, Serializable {
    // 序列号
    private static final long serialVersionUID = 362498820763181265L;    
    // 默认的初始容量是16
    static final int DEFAULT_INITIAL_CAPACITY = 1 << 4;   
    // 最大容量
    static final int MAXIMUM_CAPACITY = 1 << 30; 
    // 默认的填充因子
    static final float DEFAULT_LOAD_FACTOR = 0.75f;
    // 当桶(bucket)上的结点数大于这个值时会转成红黑树
    static final int TREEIFY_THRESHOLD = 8; 
    // 当桶(bucket)上的结点数小于这个值时树转链表
    static final int UNTREEIFY_THRESHOLD = 6;
    // 桶中结构转化为红黑树对应的table的最小大小
    static final int MIN_TREEIFY_CAPACITY = 64;
    // 存储元素的数组，总是2的幂次倍
    transient Node<k,v>[] table; 
    // 存放具体元素的集
    transient Set<map.entry<k,v>> entrySet;
    // 存放元素的个数，注意这个不等于数组的长度。
    transient int size;
    // 每次扩容和更改map结构的计数器
    transient int modCount;   
    // 临界值 当实际大小(容量*填充因子)超过临界值时，会进行扩容
    int threshold;
    // 加载因子
    final float loadFactor;
}
loadFactor加载因子
loadFactor加载因子是控制数组存放数据的疏密程度，loadFactor越趋近于1，那么数组中存放的数据（entry）也就越多，也就越密，也就是会让链表的长度增加，loadFactor越小，也就是趋近与0，数组中存放的数据也就越少，也就越稀疏。
loadFactor太大导致查找元素效率低，太小导致数组的利用率低，存放的数据会很分散。loadFactor默认值为0.75f是官方给出的一个比较好的临界值

threshold
threshold = capacity * loadFactor, 当Size >= threshold的时候，那么就要考虑对数组的扩增了，也就是说，这个的意思就是衡量数组是否需要扩增的一个标准

Node节点类源码：
static class Node<K,V> implements Map.Entry<K,V> {
    final int hash; //
    final K key;
    V value; 
    Node<K,V> next;
    Node(int hash, K key, V value, Node<K, V> next) {
        this.hash = hash;
        this.key = key;
	this.value = value;
	this.next = next;
    }
    public final K getKey() {return key;}
    public final V getValue() {return value;}
    public final String toString() {return key + "=" + value}
    // 重写hashCode()方法
    public final int hashCode() {
        return Objects.hashCode(key ^ Objects.hashCode(value));    
    }
    // 重写equals()方法
    public final boolean equals(Object o) {
	if(o == this)
	    return true;
	if(o instaceof Map.Entry) {
	    Map.Entry<?,?> e = (Map.Entry<?,?>o);
	    if(Objects.equals(key, e.getKey()) &&
		Objects.equals(value, e.getValue()))
		return true;
	}
	return false;

}

}

hashMap若对应的key已存在，则使用新value替换旧value
// 判断该key对应的值是否已存在（通过遍历以该数组元素为头结点的链表 逐个判断）
	for(Entry<K,V> e = table[i]; e!= null; e = e.next) {
	    Object k;
	    // 若该key已存在（key-value已存在），则用新value替换旧value
  	    if(e.hash == hash && ((k = e.key) == key || key.equals(k))) {
            	V oldValue = e.value;
		e.value = value;
		e.recordAccess(this);
		return oldValue; // 返回旧的value；

            }
	
	}
	modCount++;
	//若该key不存在，则将key-value添加到table中
	addEntry(hash, key, value, i);
	return null;

一个进程有多个线程，多个线程共享进程的堆和方法区资源，但是每个线程有自己的程序计数器和栈区域。
程序计数器是一块内存区域，用来记录线程当前要执行的指令地址。程序计数器设计为线程私有是为了记录该线程让出CPU时的指向地址的，待再次分配到时间片时线程就可以从自己私有的计数器指定地址继续执行。另外需要注意的是，如果执行的是native方法，那么pc计数器记录的是undefined地址，只有执行的是Java代码时pc计数器记录的才是下一条指令的地址
每个线程都有自己的栈资源，用于存储该线程的局部变量，这些局部变量是该线程私有的，其他线程是访问不了的，除此之外栈还用来存放线程的调用栈帧。
堆是进程中最大的一块内存，堆是被进程中所有的线程共享的，是进程创建时分配的，堆里面主要存放使用new操作创建的对象实例
方法区则用来存放JVM加载的类、常量及静态变量等信息，也是线程共享的
Java线程创建方式。
1、继承Thread类方式的实现
public class ThreadTest {
    // 继承Thread类并重写run方法
    public static class MyThread extends  Thread {
      @Override
      public void run() {
	
	}
    }

    public static void main(String[] args) {
	// 创建线程
	MyThread thread = new MyThread();
	// 启动线程
	thread.start();
	}
}

2、Runable接口
public static class RunableTask implements Runnable {
	@Override
	public void run() {

	}
}

public static void main(String[] args) throws InterruptedException{
	RunableTask task = new RunableTask();
	new Thread(task).start();
	mew Thread(task).start();
}
3、使用FutureTask
public static class CallerTask implements Callable<String> {
	@Override
	public String call() throws Exception {
		return "hello";	
	}
}
public static void main(String[] args) throws InterruptedException {
	//创建异步任务
	FutureTask<String> futureTask = new FutureTask<>(new CallerTask());
	//启动线程
	new Thread(futureTask).start();
	try {
	    //等待任务执行完毕，并返回结果
	    String result = futureTask.get();
	} catch (ExecutionException e) {
	    e.printStackTrace();
	}
}
总结：使用继承方式的好处是方便传参，你可以在子类里面添加成员变量，通过set方法设置参数或者通过构造函数进行传参，而如果使用Runnable方式，则只能使用主线程里面被声明为final的变量。不好的地方是Java不支持多继承，如果继承了Thread类，那么子类不能再继承其他类，而Runable则没有这个限制。前两种方式都没办法拿到任务的返回结果，但是FutureTask方式可以。

让出CPU执行权的yield方法
Thread类中有一个静态的yield方法，当一个线程调用yield方法时，实际就是在暗示线程调度器当前线程请求让出自己的CPU使用，但是线程调度器可以无条件忽略这个暗示。

sleep与yield方法的区别在于，当线程调用sleep方法时调用线程会被阻塞挂起指定的时间，在这期间线程调度器不会去调度该线程。而调用yield方法时，线程只是让出自己剩余的时间片，并没有被阻塞挂起，而是处于就绪状态，线程调度器下一次调度时就有可能调度到当前线程执行。

线程中断
Java中线程中断是一种线程间的协作模式，通过设置线程的中断标志并不能直接终止该线程的执行，而是被中断的线程根据中断状态自行处理。
void interrupt方法：中断线程，例如，当线程A运行时，线程B可以调用线程A的interrupt()方法来设置线程A的中断标志为true并立即返回。设置标志仅仅是设置标志，线程A实际并没有被中断，它会继续往下执行，这时候若线程B调用线程A的interrupt()方法，线程A会在调用这些方法的地方抛出InterruptException异常而返回。
boolean isInterrupted():检测当前线程是否被中断，如果是返回true，否则返回false
boolean interrupted()：检测当前线程是否被中断，如果是返回true，否则返回false。与isInterrupted不同的是，该方法如果发现当前线程被中断，则会清除中断标志，并且该方法是static方法，可以通过Thread类直接调用。另外。在interrupted()内部是获取当前调用线程的中断标志而不是调用interrupted()方法实例对象的中断标志。
public static boolean interrupted() {
    // 清除中断标志
    return currentThread().isInterrupted(true);
}

死锁产生的四个条件
互斥条件、请求并持有条件、不可剥夺条件、环路等待条件

守护线程与用户线程
Java中的线程分为两类，分别为daemon线程（守护线程）和user线程（用户线程）。在JVM启动时会调用main函数，main函数所在的线程就是一个用户线程，在JVM内部同时还启动了好多守护线程，比如垃圾回收线程。区别：当最后一个非守护线程结束是，JVM会正常退出。
创建守护线程
public static void mian(String[] args) {
	Thread daemonThread = new Thread(new Runnable() {
		public void run() {}
	});
	//设置为守护线程
	daemonThread.setDaemon(true);
	daemonThread.start();
}


Thread类中有一个threadLocals和一个inheritableThreadLocals,它们都是THreadLocalMap类型的变量，而ThreadLocalMap是一个定制化的HashMap。在默认情况下，每个线程中的这两个变量都为null，只有当前线程第一次调用ThreadLocal的set或者get方法时才会创建它们。每个线程的本地变量不是存放在TheadLocal实例里面。而是存放在调用线程的threadLocals变量里面。也就是说，ThreadLocal类型的本地变量存放在具体的线程内存空间中。ThreadLocal就是一个工具壳，它通过set方法把value值放入调用线程的threadLocals里面并存放起来，当线程调用它的get方法时，再从当前线程的threadLocals变量里面将其拿出来使用。如果调用线程一直不终止，那么这个本地变量会一直存放在调用线程的threadLocals变量里面，所以当不需要使用本地变量时可以通过调用ThreadLocal变量的remove方法，从当前线程的threadLocals里面删除该本地变量；

同一个ThreadLocal变量在父线程中被设置值后，在子线程中是获取不到的。因为在子线程thread里面调用get方法时当前线程为thread线程，而调用set方法时设置线程变量的是main线程，两者是不同的线程，自然子线程访问是返回null

InheritableThreadLocal类通过重写代码让本地变量保存到了具体的inheritableThreadLocals变量里面，那么线程在通过InheritableThreadLocal类实例的set或者get方法设置变量时，就会创建当前线程的inheritableThreadLocals变量。当父线程创建子线程时，构造函数会把父线程中inheritableThreadLocals变量里面的本地变量复制一份保存到子线程的inheritableThreadLocals变量里面。















